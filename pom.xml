<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.landasoft.mas.demo.docker</groupId>
	<artifactId>spring-boot-docker</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>spring-boot-docker</name>
	<description>spring boot project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!-- 增加docker镜像前缀 ，其实就是对应仓库里面的ip地址或者域名/项目名称，不是应用的项目名称-->
		<docker.image.prefix>harbor.k8s.landaudev.com/demo</docker.image.prefix>
	</properties>
	<profiles>  
	    <profile>  
	        <id>dev</id>  
	        <properties>  
	            <!-- 环境标识，需要与配置文件的名称相对应 -->  
	            <activatedProperties>dev</activatedProperties>  
	        </properties>  
	        <activation>  
	            <!-- 默认环境 -->  
	            <activeByDefault>true</activeByDefault>  
	        </activation>  
	    </profile>  
	    <profile>  
	        <id>test</id>  
	        <properties>  
	            <activatedProperties>test</activatedProperties>  
	        </properties>  
	    </profile>  
	    <profile>  
	        <id>prod</id>  
	        <properties>  
	            <activatedProperties>prod</activatedProperties>  
	        </properties>  
	    </profile>  
	</profiles>  
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- mybatis 依赖 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- mysql依赖 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency> 
		<!-- alibaba 数据库连接池-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.6</version>
		</dependency>
		 <!-- 分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.3</version>
        </dependency>
        <dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.6.0</version>
		</dependency>
		<!-- swagger begin -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>
		<!-- swagger end -->
		<!-- 启用 Actuator 的端点提供Spring Boot所有的production-ready特性 -->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-actuator</artifactId>
    	</dependency>
	</dependencies>

	<build>
		<!-- <finalName>spring-boot-docker</finalName> --> <!-- 指定package生成的文件名为spring-boot-docker.jar -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin -->
	        <plugin>
	            <groupId>com.spotify</groupId>
	            <artifactId>docker-maven-plugin</artifactId>
	            <version>0.4.12</version>
	            <!-- 此配置用于绑定mvn package执行就自动执行了mvn docker:build
	            <executions>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				-->
	            <configuration>
	                <!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 -->
	                <!-- 详见：https://github.com/spotify/docker-maven-plugin    Invalid repository name ... only [a-z0-9-_.] are allowed-->
	                <!-- <imageName>wulinyun/spring-boot-docker</imageName> -->
	                <!-- 如果要将docker镜像push到DockerHub上去的话，这边的路径要和repo路径一致 -->
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
	               <!--  <baseImage>java</baseImage>
	                <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint> -->
	                <!-- 指定Dockerfile所在的路径 -->
					<dockerDirectory>${basedir}/src/main/resources</dockerDirectory>
	                <resources>
	                    <resource>
	                        <targetPath>/</targetPath>
	                        <directory>${project.build.directory}</directory>
	                        <include>${project.build.finalName}.jar</include>
	                    </resource>
	                </resources>
	                <!-- 以下两行是为了docker push到Docker仓库中使用的。 -->
	                <!-- PCF私有镜像仓库
	                <serverId>docker-pcf-harbor</serverId>
					<registryUrl>https://harbor.landaudev.com</registryUrl> 
					-->
					<!-- k8s私有镜像仓库  -->
					<serverId>docker-k8s-harbor</serverId>
					<registryUrl>https://harbor.k8s.landaudev.com</registryUrl>
	            </configuration>
	        </plugin>
		</plugins>
	</build>


</project>
